nginx: the configuration file /tmp/tmpyp3x39yl.conf syntax is ok
nginx: configuration file /tmp/tmpyp3x39yl.conf test is successful
 * Manually resetting nginx to stopped state
genes: 15
individuals : 16
generations: 8
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1306;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 44;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1544;
    client_max_body_size 1226752;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1845;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 52;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpvtmqkgwd.conf syntax is ok
nginx: configuration file /tmp/tmpvtmqkgwd.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpc3e6amoy.conf syntax is ok
nginx: configuration file /tmp/tmpc3e6amoy.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1967;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 109;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 620;
    client_max_body_size 896000;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpk8rwlr8r.conf syntax is ok
nginx: configuration file /tmp/tmpk8rwlr8r.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1165;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 21;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1202;
    client_max_body_size 747520;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.17.8;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.  * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpiwn4_6yy.conf syntax is ok
nginx: configuration file /tmp/tmpiwn4_6yy.conf test is successful

	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 550;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 49;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 659;
    client_max_body_size 2071552;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpekl_txqr.conf syntax is ok
nginx: configuration file /tmp/tmpekl_txqr.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 729;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 109;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1298;
    client_max_body_size 1951744;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpdzfkjeiy.conf syntax is ok
nginx: configuration file /tmp/tmpdzfkjeiy.conf test is successful
 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1945;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 94;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 766;
    client_max_body_size 1599488;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.17.8;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpn4od9waz.conf syntax is ok
nginx: configuration file /tmp/tmpn4od9waz.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1677;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 28;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1985;
    client_max_body_size 2088960;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_j5uwc0p.conf syntax is ok
nginx: configuration file /tmp/tmp_j5uwc0p.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpajvywngp.conf syntax is ok
nginx: configuration file /tmp/tmpajvywngp.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1582;
    client_max_body_size 969728;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1009;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 17;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 893;
    client_max_body_size 592896;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpy3woiror.conf syntax is ok
nginx: configuration file /tmp/tmpy3woiror.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpxx0m3vus.conf syntax is ok
nginx: configuration file /tmp/tmpxx0m3vus.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1725;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 111;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1691;
    client_max_body_size 2093056;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpsttmixh8.conf syntax is ok
nginx: configuration file /tmp/tmpsttmixh8.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 517;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 87;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 724;
    client_max_body_size 1951744;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpazyc6f5g.conf syntax is ok
nginx: configuration file /tmp/tmpazyc6f5g.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 2041;
    client_max_body_size 1472512;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpp4qpi95j.conf syntax is ok
nginx: configuration file /tmp/tmpp4qpi95j.conf test is successful
 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpwssaycl4.conf syntax is ok
nginx: configuration file /tmp/tmpwssaycl4.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 609;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 33;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 556;
    client_max_body_size 860160;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp6_4f51ln.conf syntax is ok
nginx: configuration file /tmp/tmp6_4f51ln.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
→→ 0
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1677;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 29;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1985;
    client_max_body_size 2088960;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpq7pcr968.conf syntax is ok
nginx: configuration file /tmp/tmpq7pcr968.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 894;
    client_max_body_size 969728;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpp94hclki.conf syntax is ok
nginx: configuration file /tmp/tmpp94hclki.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1845;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 52;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmppj7u8obn.conf syntax is ok
nginx: configuration file /tmp/tmppj7u8obn.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpsjtc2fas.conf syntax is ok
nginx: configuration file /tmp/tmpsjtc2fas.conf test is successful
 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 2041;
    client_max_body_size 1472512;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 24;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 2041;
    client_max_body_size 1472512;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpvw54epe3.conf syntax is ok
nginx: configuration file /tmp/tmpvw54epe3.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 2041;
    client_max_body_size 1472512;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpd1_5x2uu.conf syntax is ok
nginx: configuration file /tmp/tmpd1_5x2uu.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 2041;
    client_max_body_size 896000;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpylg2kbzm.conf syntax is ok
nginx: configuration file /tmp/tmpylg2kbzm.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1677;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 28;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1985;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpq4vxlv47.conf syntax is ok
nginx: configuration file /tmp/tmpq4vxlv47.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 2041;
    client_max_body_size 1472512;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp01yymufz.conf syntax is ok
nginx: configuration file /tmp/tmp01yymufz.conf test is successful
 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 2041;
    client_max_body_size 1472512;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpmrfv3hxq.conf syntax is ok
nginx: configuration file /tmp/tmpmrfv3hxq.conf test is successful
 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1010;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 893;
    client_max_body_size 592896;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpisb3zdew.conf syntax is ok
nginx: configuration file /tmp/tmpisb3zdew.conf test is successful
 * Manually resetting nginx to stopped state
 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1967;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 109;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1985;
    client_max_body_size 2088960;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmp1g05kbo1.conf syntax is ok
nginx: configuration file /tmp/tmp1g05kbo1.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp2w9n3eni.conf syntax is ok
nginx: configuration file /tmp/tmp2w9n3eni.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 14;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 556;
    client_max_body_size 860160;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmplj830_46.conf syntax is ok
nginx: configuration file /tmp/tmplj830_46.conf test is successful
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  21  Fitness  16
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  22  Fitness  17
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  22  Fitness  17
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  22  Fitness  17
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  24  Fitness  19
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1968;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 109;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 620;
    client_max_body_size 592896;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpkvr_1y43.conf syntax is ok
nginx: configuration file /tmp/tmpkvr_1y43.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_n2vy9kr.conf syntax is ok
nginx: configuration file /tmp/tmp_n2vy9kr.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
sorted
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [1617, 46, 0, 0, 0, 894, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 0, 0, 1, 2041, 1438, 0, 0, 0, 3, 0, 1, 1, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 0, 1, 1, 1, 0, 1, 2, 0]),
 (8, [964, 14, 0, 1, 1, 556, 840, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 1, 0, 2, 2, 0, 1, 2, 0]),
 (10, [1967, 109, 0, 0, 1, 620, 875, 0, 1, 0, 3, 0, 1, 0, 1]),
 (10, [1967, 109, 0, 0, 1, 1985, 2040, 0, 0, 2, 2, 0, 1, 0, 1]),
 (10, [1968, 109, 0, 0, 1, 620, 579, 0, 0, 0, 3, 0, 1, 0, 1]),
 (11, [843, 25, 0, 0, 0, 2041, 1438, 0, 0, 1, 4, 1, 0, 1, 0]),
 (11, [609, 33, 1, 0, 1, 556, 840, 0, 1, 1, 0, 1, 0, 1, 0]),
 (11, [843, 24, 0, 0, 0, 2041, 1438, 0, 0, 1, 4, 1, 0, 1, 0]),
 (11, [843, 25, 0, 0, 0, 2041, 1438, 0, 1, 1, 1, 1, 0, 1, 0]),
 (11, [843, 25, 0, 0, 0, 2041, 875, 0, 0, 0, 4, 1, 0, 1, 0])]
←←
→→ 1
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpzip8xq5m.conf syntax is ok
nginx: configuration file /tmp/tmpzip8xq5m.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1967;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 620;
    client_max_body_size 896000;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpsf6caoer.conf syntax is ok
nginx: configuration file /tmp/tmpsf6caoer.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1966;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 109;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1985;
    client_max_body_size 2088960;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpw7yzi59p.conf syntax is ok
nginx: configuration file /tmp/tmpw7yzi59p.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpdh464jey.conf syntax is ok
nginx: configuration file /tmp/tmpdh464jey.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpmpe7k2jk.conf syntax is ok
nginx: configuration file /tmp/tmpmpe7k2jk.conf test is successful
 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp77crvfc0.conf syntax is ok
nginx: configuration file /tmp/tmp77crvfc0.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 894;
    client_max_body_size 970752;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpy7kp5rvh.conf syntax is ok
nginx: configuration file /tmp/tmpy7kp5rvh.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpggvmkrbn.conf syntax is ok
nginx: configuration file /tmp/tmpggvmkrbn.conf test is successful
 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp2g5r4sql.conf syntax is ok
nginx: configuration file /tmp/tmp2g5r4sql.conf test is successful
 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 14;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1985;
    client_max_body_size 2088960;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp3s703g_8.conf syntax is ok
nginx: configuration file /tmp/tmp3s703g_8.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmps7ietsng.conf syntax is ok
nginx: configuration file /tmp/tmps7ietsng.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpxygpg9qy.conf syntax is ok
nginx: configuration file /tmp/tmpxygpg9qy.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 83;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp0bwg7x0m.conf syntax is ok
nginx: configuration file /tmp/tmp0bwg7x0m.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 895;
    client_max_body_size 969728;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1967;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 109;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 620;
    client_max_body_size 896000;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpw627p9sg.conf syntax is ok
nginx: configuration file /tmp/tmpw627p9sg.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_7kyn49u.conf syntax is ok
nginx: configuration file /tmp/tmp_7kyn49u.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 620;
    client_max_body_size 896000;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpelyr0z55.conf syntax is ok
nginx: configuration file /tmp/tmpelyr0z55.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [1617, 46, 0, 0, 0, 894, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 0, 0, 1, 2041, 1438, 0, 0, 0, 3, 0, 1, 1, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 0, 1, 1, 1, 0, 1, 2, 0]),
 (8, [964, 14, 0, 1, 1, 556, 840, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 1, 0, 2, 2, 0, 1, 2, 0]),
 (8, [567, 13, 0, 1, 0, 512, 886, 0, 0, 2, 2, 0, 0, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 0, 1, 1, 0, 1, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 1, 1, 1, 0, 1, 2, 0]),
 (8, [1617, 25, 0, 0, 0, 894, 948, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 1, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 0]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 3, 0, 1, 1, 0]),
 (8, [964, 14, 1, 1, 1, 1985, 2040, 0, 0, 2, 2, 0, 1, 1, 1]),
 (8, [1617, 46, 1, 1, 0, 512, 886, 1, 1, 1, 3, 0, 2, 2, 0])]
←←
→→ 2
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpjclibiju.conf syntax is ok
nginx: configuration file /tmp/tmpjclibiju.conf test is successful
 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpr4yzpdus.conf syntax is ok
nginx: configuration file /tmp/tmpr4yzpdus.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 906240;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpkxnq2no3.conf syntax is ok
nginx: configuration file /tmp/tmpkxnq2no3.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpi9_blnhq.conf syntax is ok
nginx: configuration file /tmp/tmpi9_blnhq.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 894;
    client_max_body_size 968704;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpq0_n62l7.conf syntax is ok
nginx: configuration file /tmp/tmpq0_n62l7.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 894;
    client_max_body_size 969728;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmptl8uoinv.conf syntax is ok
nginx: configuration file /tmp/tmptl8uoinv.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp7tm7zofl.conf syntax is ok
nginx: configuration file /tmp/tmp7tm7zofl.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpqf_ib4xe.conf syntax is ok
nginx: configuration file /tmp/tmpqf_ib4xe.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 2041;
    client_max_body_size 1472512;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpamcp7dgk.conf syntax is ok
nginx: configuration file /tmp/tmpamcp7dgk.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpbnt3si6s.conf syntax is ok
nginx: configuration file /tmp/tmpbnt3si6s.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmprgze3rcr.conf syntax is ok
nginx: configuration file /tmp/tmprgze3rcr.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1817;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1819;
    client_max_body_size 1672192;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpp8gsbhm9.conf syntax is ok
nginx: configuration file /tmp/tmpp8gsbhm9.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmprja1bbhu.conf syntax is ok
nginx: configuration file /tmp/tmprja1bbhu.conf test is successful

Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1819;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp4361n97h.conf syntax is ok
nginx: configuration file /tmp/tmp4361n97h.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 14;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpkea65u4o.conf syntax is ok
nginx: configuration file /tmp/tmpkea65u4o.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpzwvj4a2w.conf syntax is ok
nginx: configuration file /tmp/tmpzwvj4a2w.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [1617, 46, 0, 0, 0, 894, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 0, 0, 1, 2041, 1438, 0, 0, 0, 3, 0, 1, 1, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 0, 1, 1, 1, 0, 1, 2, 0]),
 (8, [964, 14, 0, 1, 1, 556, 840, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 1, 0, 2, 2, 0, 1, 2, 0]),
 (8, [567, 13, 0, 1, 0, 512, 886, 0, 0, 2, 2, 0, 0, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 0, 1, 1, 0, 1, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 1, 1, 1, 0, 1, 2, 0]),
 (8, [1617, 25, 0, 0, 0, 894, 948, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 1, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 0]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 3, 0, 1, 1, 0]),
 (8, [964, 14, 1, 1, 1, 1985, 2040, 0, 0, 2, 2, 0, 1, 1, 1]),
 (8, [1617, 46, 1, 1, 0, 512, 886, 1, 1, 1, 3, 0, 2, 2, 0])]
←←
→→ 3
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 908288;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpbggtqasv.conf syntax is ok
nginx: configuration file /tmp/tmpbggtqasv.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 14;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpeob6p5h1.conf syntax is ok
nginx: configuration file /tmp/tmpeob6p5h1.conf test is successful
 * Manually resetting nginx to stopped state
 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}nginx: the configuration file /tmp/tmp2fal07gj.conf syntax is ok
nginx: configuration file /tmp/tmp2fal07gj.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpurnexdtf.conf syntax is ok
nginx: configuration file /tmp/tmpurnexdtf.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 906240;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpq4p3iu5a.conf syntax is ok
nginx: configuration file /tmp/tmpq4p3iu5a.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpbw_y3c2n.conf syntax is ok
nginx: configuration file /tmp/tmpbw_y3c2n.conf test is successful
 * Manually resetting nginx to stopped state
 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmp24i54x_z.conf syntax is ok
nginx: configuration file /tmp/tmp24i54x_z.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpbf56n41m.conf syntax is ok
nginx: configuration file /tmp/tmpbf56n41m.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpkksh39t5.conf syntax is ok
nginx: configuration file /tmp/tmpkksh39t5.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 85;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmprq8yt549.conf syntax is ok
nginx: configuration file /tmp/tmprq8yt549.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpo8l0gg9l.conf syntax is ok
nginx: configuration file /tmp/tmpo8l0gg9l.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpb63hy176.conf syntax is ok
nginx: configuration file /tmp/tmpb63hy176.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpycamg0l5.conf syntax is ok
nginx: configuration file /tmp/tmpycamg0l5.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 566;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1985;
    client_max_body_size 2088960;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpt3lczu2g.conf syntax is ok
nginx: configuration file /tmp/tmpt3lczu2g.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpcy7vvlr7.conf syntax is ok
nginx: configuration file /tmp/tmpcy7vvlr7.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmppwpqnfqh.conf syntax is ok
nginx: configuration file /tmp/tmppwpqnfqh.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [1617, 46, 0, 0, 0, 894, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 0, 0, 1, 2041, 1438, 0, 0, 0, 3, 0, 1, 1, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 0, 1, 1, 1, 0, 1, 2, 0]),
 (8, [964, 14, 0, 1, 1, 556, 840, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 1, 0, 2, 2, 0, 1, 2, 0]),
 (8, [567, 13, 0, 1, 0, 512, 886, 0, 0, 2, 2, 0, 0, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 0, 1, 1, 0, 1, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 1, 1, 1, 0, 1, 2, 0]),
 (8, [1617, 25, 0, 0, 0, 894, 948, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 1, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 0]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 3, 0, 1, 1, 0]),
 (8, [964, 14, 1, 1, 1, 1985, 2040, 0, 0, 2, 2, 0, 1, 1, 1]),
 (8, [1617, 46, 1, 1, 0, 512, 886, 1, 1, 1, 3, 0, 2, 2, 0])]
←←
→→ 4
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 894;
    client_max_body_size 969728;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpu6t_343e.conf syntax is ok
nginx: configuration file /tmp/tmpu6t_343e.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp2rj2u096.conf syntax is ok
nginx: configuration file /tmp/tmp2rj2u096.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 85;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpujgo586q.conf syntax is ok
nginx: configuration file /tmp/tmpujgo586q.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmptdxm26si.conf syntax is ok
nginx: configuration file /tmp/tmptdxm26si.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1817;
    client_max_body_size 1472512;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmprobz3ils.conf syntax is ok
nginx: configuration file /tmp/tmprobz3ils.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1616;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 894;
    client_max_body_size 969728;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpfahf3m4y.conf syntax is ok
nginx: configuration file /tmp/tmpfahf3m4y.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpw1dsi_ep.conf syntax is ok
nginx: configuration file /tmp/tmpw1dsi_ep.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpm9fq8hba.conf syntax is ok
nginx: configuration file /tmp/tmpm9fq8hba.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 2041;
    client_max_body_size 1472512;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmp8oqqyy6t.conf syntax is ok
nginx: configuration file /tmp/tmp8oqqyy6t.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmppmgwmxa0.conf syntax is ok
nginx: configuration file /tmp/tmppmgwmxa0.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpes05nh0a.conf syntax is ok
nginx: configuration file /tmp/tmpes05nh0a.conf test is successful

Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpkrneuoeb.conf syntax is ok
nginx: configuration file /tmp/tmpkrneuoeb.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpbro4w1tr.conf syntax is ok
nginx: configuration file /tmp/tmpbro4w1tr.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmptsph60s3.conf syntax is ok
nginx: configuration file /tmp/tmptsph60s3.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpxernbhw3.conf syntax is ok
nginx: configuration file /tmp/tmpxernbhw3.conf test is successful
 * Manually resetting nginx to stopped state
 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [1617, 46, 0, 0, 0, 894, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 0, 0, 1, 2041, 1438, 0, 0, 0, 3, 0, 1, 1, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 0, 1, 1, 1, 0, 1, 2, 0]),
 (8, [964, 14, 0, 1, 1, 556, 840, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 1, 0, 2, 2, 0, 1, 2, 0]),
 (8, [567, 13, 0, 1, 0, 512, 886, 0, 0, 2, 2, 0, 0, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 0, 1, 1, 0, 1, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 1, 1, 1, 0, 1, 2, 0]),
 (8, [1617, 25, 0, 0, 0, 894, 948, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 1, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 0]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 3, 0, 1, 1, 0]),
 (8, [964, 14, 1, 1, 1, 1985, 2040, 0, 0, 2, 2, 0, 1, 1, 1])nginx: the configuration file /tmp/tmpep0wd9n1.conf syntax is ok
nginx: configuration file /tmp/tmpep0wd9n1.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp34w6hmb6.conf syntax is ok
nginx: configuration file /tmp/tmp34w6hmb6.conf test is successful
,
 (8, [1617, 46, 1, 1, 0, 512, 886, 1, 1, 1, 3, 0, 2, 2, 0])]
←←
→→ 5
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpdcjatc5e.conf syntax is ok
nginx: configuration file /tmp/tmpdcjatc5e.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp3mo8o5dm.conf syntax is ok
nginx: configuration file /tmp/tmp3mo8o5dm.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 513;
    client_max_body_size 907264;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp4hadujjr.conf syntax is ok
nginx: configuration file /tmp/tmp4hadujjr.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 907264;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 14;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 556;
    client_max_body_size 860160;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpn4xj9ay1.conf syntax is ok
nginx: configuration file /tmp/tmpn4xj9ay1.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmph42mol1u.conf syntax is ok
nginx: configuration file /tmp/tmph42mol1u.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp4wgz89gp.conf syntax is ok
nginx: configuration file /tmp/tmp4wgz89gp.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_gdd3vew.conf syntax is ok
nginx: configuration file /tmp/tmp_gdd3vew.conf test is successful
 * Manually resetting nginx to stopped state
 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 894;
    client_max_body_size 969728;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmp5hduf5jo.conf syntax is ok
nginx: configuration file /tmp/tmp5hduf5jo.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_nn1xcle.conf syntax is ok
nginx: configuration file /tmp/tmp_nn1xcle.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 964;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 12;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpwg_jtyrj.conf syntax is ok
nginx: configuration file /tmp/tmpwg_jtyrj.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 2041;
    client_max_body_size 1472512;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpgc7tdg0p.conf syntax is ok
nginx: configuration file /tmp/tmpgc7tdg0p.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpmc5bed0h.conf syntax is ok
nginx: configuration file /tmp/tmpmc5bed0h.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp5vdnheow.conf syntax is ok
nginx: configuration file /tmp/tmp5vdnheow.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpq7yf5wrl.conf syntax is ok
nginx: configuration file /tmp/tmpq7yf5wrl.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 841;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
sorted
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [1617, 46, 0, 0, 0, 894, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 0, 0, 1, 2041, 1438, 0, 0, 0, 3, 0, 1, 1, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 0, 1, 1, 1, 0, 1, 2, 0])nginx: the configuration file /tmp/tmp0pjdyfws.conf syntax is ok
nginx: configuration file /tmp/tmp0pjdyfws.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpzbggeian.conf syntax is ok
nginx: configuration file /tmp/tmpzbggeian.conf test is successful
,
 (8, [964, 14, 0, 1, 1, 556, 840, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 1, 0, 2, 2, 0, 1, 2, 0]),
 (8, [567, 13, 0, 1, 0, 512, 886, 0, 0, 2, 2, 0, 0, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 0, 1, 1, 0, 1, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 1, 1, 1, 0, 1, 2, 0]),
 (8, [1617, 25, 0, 0, 0, 894, 948, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 1, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 0]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 3, 0, 1, 1, 0]),
 (8, [964, 14, 1, 1, 1, 1985, 2040, 0, 0, 2, 2, 0, 1, 1, 1]),
 (8, [1617, 46, 1, 1, 0, 512, 886, 1, 1, 1, 3, 0, 2, 2, 0])]
←←
→→ 6
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpwk6woq6n.conf syntax is ok
nginx: configuration file /tmp/tmpwk6woq6n.conf test is successful
 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1672192;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp5dutexuj.conf syntax is ok
nginx: configuration file /tmp/tmp5dutexuj.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1055744;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpz7j0ka_b.conf syntax is ok
nginx: configuration file /tmp/tmpz7j0ka_b.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpffnd9gx5.conf syntax is ok
nginx: configuration file /tmp/tmpffnd9gx5.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp2quktp2a.conf syntax is ok
nginx: configuration file /tmp/tmp2quktp2a.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 46;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 894;
    client_max_body_size 969728;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpwb02l2wt.conf syntax is ok
nginx: configuration file /tmp/tmpwb02l2wt.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp23y83k71.conf syntax is ok
nginx: configuration file /tmp/tmp23y83k71.conf test is successful
 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 893;
    client_max_body_size 969728;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpb4d8y9xt.conf syntax is ok
nginx: configuration file /tmp/tmpb4d8y9xt.conf test is successful
 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 840;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp1g288wop.conf syntax is ok
nginx: configuration file /tmp/tmp1g288wop.conf test is successful

Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmprziz0m_3.conf syntax is ok
nginx: configuration file /tmp/tmprziz0m_3.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpss4uypge.conf syntax is ok
nginx: configuration file /tmp/tmpss4uypge.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpvjwdowlq.conf syntax is ok
nginx: configuration file /tmp/tmpvjwdowlq.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpgvbsxa_s.conf syntax is ok
nginx: configuration file /tmp/tmpgvbsxa_s.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpm9rd_fg9.conf syntax is ok
nginx: configuration file /tmp/tmpm9rd_fg9.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp7_xwhrp3.conf syntax is ok
nginx: configuration file /tmp/tmp7_xwhrp3.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [1617, 46, 0, 0, 0, 894, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 0, 0, 1, 2041, 1438, 0, 0, 0, 3, 0, 1, 1, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 0, 1, 1, 1, 0, 1, 2, 0]),
 (8, [964, 14, 0, 1, 1, 556, 840, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 1, 0, 2, 2, 0, 1, 2, 0]),
 (8, [567, 13, 0, 1, 0, 512, 886, 0, 0, 2, 2, 0, 0, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 0, 1, 1, 0, 1, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 1, 1, 1, 0, 1, 2, 0]),
 (8, [1617, 25, 0, 0, 0, 894, 948, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 1, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 0]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 3, 0, 1, 1, 0]),
 (8, [964, 14, 1, 1, 1, 1985, 2040, 0, 0, 2, 2, 0, 1, 1, 1]),
 (8, [1617, 46, 1, 1, 0, 512, 886, 1, 1, 1, 3, 0, 2, 2, 0])]
←←
→→ 7
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpt9dll4p9.conf syntax is ok
nginx: configuration file /tmp/tmpt9dll4p9.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpu9c2z2cx.conf syntax is ok
nginx: configuration file /tmp/tmpu9c2z2cx.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpsx4c45d0.conf syntax is ok
nginx: configuration file /tmp/tmpsx4c45d0.conf test is successful
 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 566;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1053696;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpfotigz37.conf syntax is ok
nginx: configuration file /tmp/tmpfotigz37.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 568;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp4ibrzpgv.conf syntax is ok
nginx: configuration file /tmp/tmp4ibrzpgv.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpt2g32ntk.conf syntax is ok
nginx: configuration file /tmp/tmpt2g32ntk.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp6samo6pe.conf syntax is ok
nginx: configuration file /tmp/tmp6samo6pe.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpzhmqbh1r.conf syntax is ok
nginx: configuration file /tmp/tmpzhmqbh1r.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 907264;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmp80umtxy9.conf syntax is ok
nginx: configuration file /tmp/tmp80umtxy9.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp01e0s4qy.conf syntax is ok
nginx: configuration file /tmp/tmp01e0s4qy.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1818;
    client_max_body_size 1672192;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpgdy3akph.conf syntax is ok
nginx: configuration file /tmp/tmpgdy3akph.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1617;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 894;
    client_max_body_size 970752;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpm4vqi9or.conf syntax is ok
nginx: configuration file /tmp/tmpm4vqi9or.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpxee6xjwd.conf syntax is ok
nginx: configuration file /tmp/tmpxee6xjwd.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 13;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 860160;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpcxvt2c_1.conf syntax is ok
nginx: configuration file /tmp/tmpcxvt2c_1.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 843;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 25;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 512;
    client_max_body_size 908288;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 567;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 84;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 840;
    client_max_body_size 1054720;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpw3q1_ok0.conf syntax is ok
nginx: configuration file /tmp/tmpw3q1_ok0.conf test is successful
 * Manually resetting nginx to stopped state

Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [1617, 46, 0, 0, 0, 894, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 0, 0, 1, 2041, 1438, 0, 0, 0, 3, 0, 1, 1, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 0, 1, 1, 1, 0, 1, 2, 0]),
 (8, [964, 14, 0, 1, 1, 556, 840, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 1, 0, 2, 2, 0, 1, 2, 0]),
 (8, [567, 13, 0, 1, 0, 512, 886, 0, 0, 2, 2, 0, 0, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 0, 1, 1, 0, 1, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 1, 1, 1, 0, 1, 2, 0]),
 (8, [1617, 25, 0, 0, 0, 894, 948, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 1, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 0]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 3, 0, 1, 1, 0]),
 (8, [964, 14, 1, 1, 1, 1985, 2040, 0, 0, 2, 2, 0, 1, 1, 1]),
 (8, [1617, 46, 1, 1, 0, 512, 886, 1, 1, 1, 3, 0, 2, 2, 0])]
←←

Población de 16 individuos durante 8 generaciones
Población inicial:
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (10, [1967, 109, 0, 0, 1, 620, 875, 0, 1, 0, 3, 0, 1, 0, 1]),
 (11, [843, 25, 0, 0, 0, 2041, 1438, 0, 0, 1, 4, 1, 0, 1, 0]),
 (11, [609, 33, 1, 0, 1, 556, 840, 0, 1, 1, 0, 1, 0, 1, 0]),
 (13, [1845, 52, 1, 1, 0, 1818, 1633, 0, 1, 1, 1, 1, 0, 0, 0]),
 (13, [1677, 28, 1, 0, 1, 1985, 2040, 1, 0, 2, 2, 1, 2, 0, 0]),
 (13, [1009, 17, 0, 0, 0, 893, 579, 0, 0, 1, 2, 1, 1, 0, 0]),
 (14, [550, 49, 0, 1, 1, 659, 2023, 0, 0, 2, 0, 0, 2, 1, 2]),
 (14, [1725, 111, 0, 0, 1, 1691, 2044, 1, 0, 0, 4, 0, 1, 1, 2]),
 (16, [1306, 44, 1, 1, 0, 1544, 1198, 0, 0, 1, 2, 0, 2, 0, 2]),
 (17, [1165, 21, 1, 1, 1, 1202, 730, 0, 0, 2, 5, 1, 0, 1, 2]),
 (17, [729, 109, 0, 1, 1, 1298, 1906, 0, 1, 0, 3, 1, 1, 1, 2]),
 (17, [1945, 94, 0, 0, 0, 766, 1562, 1, 0, 2, 5, 1, 0, 2, 2]),
 (19, [517, 87, 1, 1, 1, 724, 1906, 1, 0, 0, 0, 1, 1, 0, 2])]
Población final:
[(8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 2, 0, 1, 2, 0]),
 (8, [1617, 46, 1, 1, 1, 1582, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [964, 13, 0, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [1617, 46, 0, 0, 0, 894, 947, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 0, 0, 1, 2041, 1438, 0, 0, 0, 3, 0, 1, 1, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 0, 1, 1, 1, 0, 1, 2, 0]),
 (8, [964, 14, 0, 1, 1, 556, 840, 1, 1, 1, 4, 0, 2, 1, 1]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 1, 0, 2, 2, 0, 1, 2, 0]),
 (8, [567, 13, 0, 1, 0, 512, 886, 0, 0, 2, 2, 0, 0, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 0, 1, 1, 0, 1, 2, 0]),
 (8, [568, 84, 1, 0, 0, 1818, 1633, 1, 1, 1, 1, 0, 1, 2, 0]),
 (8, [1617, 25, 0, 0, 0, 894, 948, 0, 1, 2, 3, 0, 2, 2, 0]),
 (8, [843, 25, 1, 1, 0, 512, 886, 1, 1, 1, 4, 0, 2, 1, 0]),
 (8, [567, 84, 1, 0, 1, 840, 1030, 0, 0, 2, 3, 0, 1, 1, 0]),
 (8, [964, 14, 1, 1, 1, 1985, 2040, 0, 0, 2, 2, 0, 1, 1, 1]),
 (8, [1617, 46, 1, 1, 0, 512, 886, 1, 1, 1, 3, 0, 2, 2, 0])]
Elapsed time is 2109.726265 seconds.
