nginx: the configuration file /tmp/tmp60bn2s3m.conf syntax is ok
nginx: configuration file /tmp/tmp60bn2s3m.conf test is successful
 * Manually resetting nginx to stopped state
genes: 15
individuals : 16
generations: 8
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 557;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 54;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1178;
    client_max_body_size 1840128;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 598;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 11;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 2017;
    client_max_body_size 2010112;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmp85peqff1.conf syntax is ok
nginx: configuration file /tmp/tmp85peqff1.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_qn1mvwx.conf syntax is ok
nginx: configuration file /tmp/tmp_qn1mvwx.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1196;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 109;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 896;
    client_max_body_size 854016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.17.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp41f2uyq0.conf syntax is ok
nginx: configuration file /tmp/tmp41f2uyq0.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1550;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 101;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1623;
    client_max_body_size 703488;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpy0u_4eua.conf syntax is ok
nginx: configuration file /tmp/tmpy0u_4eua.conf test is successful
 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 541;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 86;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1325056;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpql450w0s.conf syntax is ok
nginx: configuration file /tmp/tmpql450w0s.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 944;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 103;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 628;
    client_max_body_size 2068480;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmptb53459d.conf syntax is ok
nginx: configuration file /tmp/tmptb53459d.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1409;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 28;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1779;
    client_max_body_size 1359872;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp8z64uet4.conf syntax is ok
nginx: configuration file /tmp/tmp8z64uet4.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 66;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1298;
    client_max_body_size 929792;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp3lbkxbol.conf syntax is ok
nginx: configuration file /tmp/tmp3lbkxbol.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1090;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 120;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 2042;
    client_max_body_size 1412096;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1472;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 103;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1558;
    client_max_body_size 1481728;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}nginx: the configuration file /tmp/tmp2g3xv2hz.conf syntax is ok
nginx: configuration file /tmp/tmp2g3xv2hz.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp5lml6v4a.conf syntax is ok
nginx: configuration file /tmp/tmp5lml6v4a.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1419;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 22;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1259;
    client_max_body_size 684032;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.17.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpx6s6t22f.conf syntax is ok
nginx: configuration file /tmp/tmpx6s6t22f.conf test is successful
516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 2030;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpod06byfn.conf syntax is ok
nginx: configuration file /tmp/tmpod06byfn.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 915;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 114;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1253376;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpdj4m28lz.conf syntax is ok
nginx: configuration file /tmp/tmpdj4m28lz.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmplr3_1b_7.conf syntax is ok
nginx: configuration file /tmp/tmplr3_1b_7.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1067;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 18;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1458;
    client_max_body_size 799744;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpyxad4pby.conf syntax is ok
nginx: configuration file /tmp/tmpyxad4pby.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 981;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 45;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 924;
    client_max_body_size 1533952;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpzpdzv77v.conf syntax is ok
nginx: configuration file /tmp/tmpzpdzv77v.conf test is successful
 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
→→ 0
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1409;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 120;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1779;
    client_max_body_size 1359872;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp47rexbtq.conf syntax is ok
nginx: configuration file /tmp/tmp47rexbtq.conf test is successful
 * Manually resetting nginx to stopped state
 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1409;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 28;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1779;
    client_max_body_size 1359872;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmp9gzmmsxr.conf syntax is ok
nginx: configuration file /tmp/tmp9gzmmsxr.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp3ue3p96r.conf syntax is ok
nginx: configuration file /tmp/tmp3ue3p96r.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1409;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 28;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1778;
    client_max_body_size 1359872;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server caddy;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp3_262pqv.conf syntax is ok
nginx: configuration file /tmp/tmp3_262pqv.conf test is successful
 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 541;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 86;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 725;
    client_max_body_size 1325056;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options "";
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpewo80r9s.conf syntax is ok
nginx: configuration file /tmp/tmpewo80r9s.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp104hhx8m.conf syntax is ok
nginx: configuration file /tmp/tmp104hhx8m.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 66;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1298;
    client_max_body_size 930816;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmphp9lvmek.conf syntax is ok
nginx: configuration file /tmp/tmphp9lvmek.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 2030;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1090;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 120;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 2042;
    client_max_body_size 1412096;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmp_ysrqef6.conf syntax is ok
nginx: configuration file /tmp/tmp_ysrqef6.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_2yf6tw1.conf syntax is ok
nginx: configuration file /tmp/tmp_2yf6tw1.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp0haga26n.conf syntax is ok
nginx: configuration file /tmp/tmp0haga26n.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1409;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 28;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp7aeff7cy.conf syntax is ok
nginx: configuration file /tmp/tmp7aeff7cy.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 2030;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 915;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 114;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1779;
    client_max_body_size 1359872;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmp4yvztjxp.conf syntax is ok
nginx: configuration file /tmp/tmp4yvztjxp.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpqx71bc5n.conf syntax is ok
nginx: configuration file /tmp/tmpqx71bc5n.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpp5tbc_vo.conf syntax is ok
nginx: configuration file /tmp/tmpp5tbc_vo.conf test is successful
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  24  Fitness  19
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  20  Fitness  13
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 2030;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 2042;
    client_max_body_size 1412096;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpjrfo0u0v.conf syntax is ok
nginx: configuration file /tmp/tmpjrfo0u0v.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp8w64sy7w.conf syntax is ok
nginx: configuration file /tmp/tmp8w64sy7w.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (8, [1546, 37, 0, 0, 1, 1239, 1447, 1, 1, 0, 4, 0, 2, 1, 0]),
 (8, [1546, 66, 0, 1, 0, 1298, 909, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 1, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 0, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 1, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 0, 2042, 1379, 1, 1, 1, 3, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1582, 1, 1, 2, 2, 0, 2, 1, 0]),
 (10, [1550, 101, 1, 1, 0, 1623, 687, 0, 0, 0, 2, 0, 0, 0, 0]),
 (10, [1090, 120, 1, 1, 0, 2042, 1379, 1, 1, 2, 3, 0, 2, 0, 1]),
 (10, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 0, 1]),
 (10, [1090, 120, 1, 1, 0, 2042, 1379, 0, 1, 2, 3, 0, 2, 0, 1])]
←←
→→ 1
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpywtvnvq2.conf syntax is ok
nginx: configuration file /tmp/tmpywtvnvq2.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 915;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 114;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1252352;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpind172zv.conf syntax is ok
nginx: configuration file /tmp/tmpind172zv.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 915;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 114;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1253376;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpax6oa0a_.conf syntax is ok
nginx: configuration file /tmp/tmpax6oa0a_.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmplhqgobr1.conf syntax is ok
nginx: configuration file /tmp/tmplhqgobr1.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 36;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmph0cbvwa2.conf syntax is ok
nginx: configuration file /tmp/tmph0cbvwa2.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.17.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpjfex1hsf.conf syntax is ok
nginx: configuration file /tmp/tmpjfex1hsf.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp19ae6frt.conf syntax is ok
nginx: configuration file /tmp/tmp19ae6frt.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp6ev5tzem.conf syntax is ok
nginx: configuration file /tmp/tmp6ev5tzem.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1067;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 18;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1458;
    client_max_body_size 799744;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpq4qw2rax.conf syntax is ok
nginx: configuration file /tmp/tmpq4qw2rax.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpm5pd9p_n.conf syntax is ok
nginx: configuration file /tmp/tmpm5pd9p_n.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp5j92gnqe.conf syntax is ok
nginx: configuration file /tmp/tmp5j92gnqe.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 83;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpg9fzkeaz.conf syntax is ok
nginx: configuration file /tmp/tmpg9fzkeaz.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp94ofevmx.conf syntax is ok
nginx: configuration file /tmp/tmp94ofevmx.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpfazc26ho.conf syntax is ok
nginx: configuration file /tmp/tmpfazc26ho.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1253376;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmparw1hhu6.conf syntax is ok
nginx: configuration file /tmp/tmparw1hhu6.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (8, [1546, 37, 0, 0, 1, 1239, 1447, 1, 1, 0, 4, 0, 2, 1, 0]),
 (8, [1546, 66, 0, 1, 0, 1298, 909, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 1, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 0, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 1, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 0, 2042, 1379, 1, 1, 1, 3, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1582, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 1, 4, 0, 2, 1, 0]),
 (8, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 1, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1546, 36, 0, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0])]
←←
→→ 2
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 83;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpyxm9aaed.conf syntax is ok
nginx: configuration file /tmp/tmpyxm9aaed.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpqg01gzv3.conf syntax is ok
nginx: configuration file /tmp/tmpqg01gzv3.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp06gvqemd.conf syntax is ok
nginx: configuration file /tmp/tmp06gvqemd.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpzjoxg__o.conf syntax is ok
nginx: configuration file /tmp/tmpzjoxg__o.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp4jpg3f6x.conf syntax is ok
nginx: configuration file /tmp/tmp4jpg3f6x.conf test is successful
 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 891;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp6d2k313s.conf syntax is ok
nginx: configuration file /tmp/tmp6d2k313s.conf test is successful
 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpd_h2asd2.conf syntax is ok
nginx: configuration file /tmp/tmpd_h2asd2.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpjltgha0v.conf syntax is ok
nginx: configuration file /tmp/tmpjltgha0v.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmps1c43i9y.conf syntax is ok
nginx: configuration file /tmp/tmps1c43i9y.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpd9wtqwha.conf syntax is ok
nginx: configuration file /tmp/tmpd9wtqwha.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 66;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1298;
    client_max_body_size 931840;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1239;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpvfaijpm8.conf syntax is ok
nginx: configuration file /tmp/tmpvfaijpm8.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpg8jq_wz4.conf syntax is ok
nginx: configuration file /tmp/tmpg8jq_wz4.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpym6ip378.conf syntax is ok
nginx: configuration file /tmp/tmpym6ip378.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpv5bpcddb.conf syntax is ok
nginx: configuration file /tmp/tmpv5bpcddb.conf test is successful

Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmphxft9pzb.conf syntax is ok
nginx: configuration file /tmp/tmphxft9pzb.conf test is successful
 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 83;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp0lw7c0m7.conf syntax is ok
nginx: configuration file /tmp/tmp0lw7c0m7.conf test is successful
 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpa8djvp44.conf syntax is ok
nginx: configuration file /tmp/tmpa8djvp44.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (8, [1546, 37, 0, 0, 1, 1239, 1447, 1, 1, 0, 4, 0, 2, 1, 0]),
 (8, [1546, 66, 0, 1, 0, 1298, 909, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 1, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 0, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 1, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 0, 2042, 1379, 1, 1, 1, 3, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1582, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 1, 4, 0, 2, 1, 0]),
 (8, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 1, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1546, 36, 0, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0])]
←←
→→ 3
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1298;
    client_max_body_size 929792;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpn61_yj17.conf syntax is ok
nginx: configuration file /tmp/tmpn61_yj17.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp4nvyen8h.conf syntax is ok
nginx: configuration file /tmp/tmp4nvyen8h.conf test is successful
 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 66;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1297;
    client_max_body_size 929792;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp911383a_.conf syntax is ok
nginx: configuration file /tmp/tmp911383a_.conf test is successful
 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp1caqmwxl.conf syntax is ok
nginx: configuration file /tmp/tmp1caqmwxl.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1253376;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1458;
    client_max_body_size 799744;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmp_v4blz_s.conf syntax is ok
nginx: configuration file /tmp/tmp_v4blz_s.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp01s0n99b.conf syntax is ok
nginx: configuration file /tmp/tmp01s0n99b.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 889;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpxzemmcp5.conf syntax is ok
nginx: configuration file /tmp/tmpxzemmcp5.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1726;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 725;
    client_max_body_size 1253376;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmp375awy0o.conf syntax is ok
nginx: configuration file /tmp/tmp375awy0o.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpya2id50o.conf syntax is ok
nginx: configuration file /tmp/tmpya2id50o.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpt8c3syt3.conf syntax is ok
nginx: configuration file /tmp/tmpt8c3syt3.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 66;
    disable_symlinks off;
    autoindex on;
    send_timeout 1;
    large_client_header_buffers 4 1298;
    client_max_body_size 929792;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1253376;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpxmigdwvb.conf syntax is ok
nginx: configuration file /tmp/tmpxmigdwvb.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp76qjupcf.conf syntax is ok
nginx: configuration file /tmp/tmp76qjupcf.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 36;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp537one8w.conf syntax is ok
nginx: configuration file /tmp/tmp537one8w.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1726;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmp2u8nkb4q.conf syntax is ok
nginx: configuration file /tmp/tmp2u8nkb4q.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp4_54bf8v.conf syntax is ok
nginx: configuration file /tmp/tmp4_54bf8v.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 889;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpxb01r8op.conf syntax is ok
nginx: configuration file /tmp/tmpxb01r8op.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
sorted
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (8, [1546, 37, 0, 0, 1, 1239, 1447, 1, 1, 0, 4, 0, 2, 1, 0]),
 (8, [1546, 66, 0, 1, 0, 1298, 909, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 1, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 0, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 1, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 0, 2042, 1379, 1, 1, 1, 3, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1582, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 1, 4, 0, 2, 1, 0]),
 (8, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 1, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1546, 36, 0, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0])]
←←
→→ 4
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1067;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 18;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1458;
    client_max_body_size 799744;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server caddy;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmppa61es2f.conf syntax is ok
nginx: configuration file /tmp/tmppa61es2f.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpaib4qiww.conf syntax is ok
nginx: configuration file /tmp/tmpaib4qiww.conf test is successful
 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 2030;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 916;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 114;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1253376;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpzihpvlwy.conf syntax is ok
nginx: configuration file /tmp/tmpzihpvlwy.conf test is successful
 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 83;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpcrsuk7gk.conf syntax is ok
nginx: configuration file /tmp/tmpcrsuk7gk.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1067;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 18;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1458;
    client_max_body_size 799744;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpljzb6g1x.conf syntax is ok
nginx: configuration file /tmp/tmpljzb6g1x.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpcs2tim8d.conf syntax is ok
nginx: configuration file /tmp/tmpcs2tim8d.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_4fegea2.conf syntax is ok
nginx: configuration file /tmp/tmp_4fegea2.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 915;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 38;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp5xl9aaix.conf syntax is ok
nginx: configuration file /tmp/tmp5xl9aaix.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1726;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1623040;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpu9xbskw4.conf syntax is ok
nginx: configuration file /tmp/tmpu9xbskw4.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpxttcqvwf.conf syntax is ok
nginx: configuration file /tmp/tmpxttcqvwf.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1067;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 18;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1458;
    client_max_body_size 799744;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpn0bw7win.conf syntax is ok
nginx: configuration file /tmp/tmpn0bw7win.conf test is successful

Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 3
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 83;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 915;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 114;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1412096;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpgcdqs395.conf syntax is ok
nginx: configuration file /tmp/tmpgcdqs395.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmppz407ibg.conf syntax is ok
nginx: configuration file /tmp/tmppz407ibg.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp8zji4adh.conf syntax is ok
nginx: configuration file /tmp/tmp8zji4adh.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp4ry8mow0.conf syntax is ok
nginx: configuration file /tmp/tmp4ry8mow0.conf test is successful
 * Manually resetting nginx to stopped state
 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
sorted
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (8, [1546, 37, 0, 0, 1, 1239, 1447, 1, 1, 0, 4, 0, 2, 1, 0]),
 (8, [1546, 66, 0, 1, 0, 1298, 909, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 1, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 0, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 1, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 0, 2042, 1379, 1, 1, 1, 3, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1582, 1, 1, 2, 2, 0, 2, 1, 0]),
 nginx: the configuration file /tmp/tmpsz6d0_wd.conf syntax is ok
nginx: configuration file /tmp/tmpsz6d0_wd.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpw2pz311r.conf syntax is ok
nginx: configuration file /tmp/tmpw2pz311r.conf test is successful
(8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 1, 4, 0, 2, 1, 0]),
 (8, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 1, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1546, 36, 0, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0])]
←←
→→ 5
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 0;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp1s3jc12t.conf syntax is ok
nginx: configuration file /tmp/tmp1s3jc12t.conf test is successful
 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-XSS-Protection: 0 
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp8ctb2edw.conf syntax is ok
nginx: configuration file /tmp/tmp8ctb2edw.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens off;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmp4ra13a2i.conf syntax is ok
nginx: configuration file /tmp/tmp4ra13a2i.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpv2hqeqvi.conf syntax is ok
nginx: configuration file /tmp/tmpv2hqeqvi.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 66;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 929792;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpetlxdv5h.conf syntax is ok
nginx: configuration file /tmp/tmpetlxdv5h.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 889;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpu_lhdnbf.conf syntax is ok
nginx: configuration file /tmp/tmpu_lhdnbf.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpkoyz0jpm.conf syntax is ok
nginx: configuration file /tmp/tmpkoyz0jpm.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpimvpy6tn.conf syntax is ok
nginx: configuration file /tmp/tmpimvpy6tn.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpgdt_bz_j.conf syntax is ok
nginx: configuration file /tmp/tmpgdt_bz_j.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp5s5hpoks.conf syntax is ok
nginx: configuration file /tmp/tmp5s5hpoks.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmppnrsf7nk.conf syntax is ok
nginx: configuration file /tmp/tmppnrsf7nk.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmp8xkawmcb.conf syntax is ok
nginx: configuration file /tmp/tmp8xkawmcb.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmppl33rdr_.conf syntax is ok
nginx: configuration file /tmp/tmppl33rdr_.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpupw866_6.conf syntax is ok
nginx: configuration file /tmp/tmpupw866_6.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 915;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 81;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (8, [1546, 37, 0, 0, 1, 1239, 1447, 1, 1, 0, 4, 0, 2, 1, 0])nginx: the configuration file /tmp/tmpkk384b5c.conf syntax is ok
nginx: configuration file /tmp/tmpkk384b5c.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpyljfusfs.conf syntax is ok
nginx: configuration file /tmp/tmpyljfusfs.conf test is successful
,
 (8, [1546, 66, 0, 1, 0, 1298, 909, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 1, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 0, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 1, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 0, 2042, 1379, 1, 1, 1, 3, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1582, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 1, 4, 0, 2, 1, 0]),
 (8, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 1, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1546, 36, 0, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0])]
←←
→→ 6
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1623040;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 83;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpsld3wvd2.conf syntax is ok
nginx: configuration file /tmp/tmpsld3wvd2.conf test is successful
 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1726;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpfwcgfewz.conf syntax is ok
nginx: configuration file /tmp/tmpfwcgfewz.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpuhex1398.conf syntax is ok
nginx: configuration file /tmp/tmpuhex1398.conf test is successful
 * Manually resetting nginx to stopped state
 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1728;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1067;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 18;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1458;
    client_max_body_size 799744;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'https://*.google.com';";
        }
    }
}nginx: the configuration file /tmp/tmpzhklvwur.conf syntax is ok
nginx: configuration file /tmp/tmpzhklvwur.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpbkak02t0.conf syntax is ok
nginx: configuration file /tmp/tmpbkak02t0.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 Errors:
1:13: Expecting source-expression but found "'https://*.google.com'".
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 default-src 'https://*.google.com'; 
	 The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: 
script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestor, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src 
	 Medium
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.17.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpr494gvzn.conf syntax is ok
nginx: configuration file /tmp/tmpr494gvzn.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.17.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpxktlqjt1.conf syntax is ok
nginx: configuration file /tmp/tmpxktlqjt1.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 915;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 114;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 725;
    client_max_body_size 1253376;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp5ry3ci2_.conf syntax is ok
nginx: configuration file /tmp/tmp5ry3ci2_.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpcnom705i.conf syntax is ok
nginx: configuration file /tmp/tmpcnom705i.conf test is successful

Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  17  Fitness  10
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  19  Fitness  14
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1067;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_3afegze.conf syntax is ok
nginx: configuration file /tmp/tmp_3afegze.conf test is successful
 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1726;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpen3g1qwu.conf syntax is ok
nginx: configuration file /tmp/tmpen3g1qwu.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpfyyu5qxi.conf syntax is ok
nginx: configuration file /tmp/tmpfyyu5qxi.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_017i9q4.conf syntax is ok
nginx: configuration file /tmp/tmp_017i9q4.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1067;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 18;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1458;
    client_max_body_size 800768;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpj6frhg7h.conf syntax is ok
nginx: configuration file /tmp/tmpj6frhg7h.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
sorted
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (8, [1546, 37, 0, 0, 1, 1239, 1447, 1, 1, 0, 4, 0, 2, 1, 0]),
 nginx: the configuration file /tmp/tmp21zgb4ju.conf syntax is ok
nginx: configuration file /tmp/tmp21zgb4ju.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpb6r4rb5a.conf syntax is ok
nginx: configuration file /tmp/tmpb6r4rb5a.conf test is successful
(8, [1546, 66, 0, 1, 0, 1298, 909, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 1, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 0, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 1, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 0, 2042, 1379, 1, 1, 1, 3, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1582, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 1, 4, 0, 2, 1, 0]),
 (8, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 1, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1546, 36, 0, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0])]
←←
→→ 7
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 2030;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmph_m29zlv.conf syntax is ok
nginx: configuration file /tmp/tmph_m29zlv.conf test is successful
 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1726;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpmdc5fgpj.conf syntax is ok
nginx: configuration file /tmp/tmpmdc5fgpj.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 2030;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 37;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 2042;
    client_max_body_size 1412096;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By Django2.2;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: Django2.2 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1546;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 36;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmpgaeezdwg.conf syntax is ok
nginx: configuration file /tmp/tmpgaeezdwg.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp6unmqj3j.conf syntax is ok
nginx: configuration file /tmp/tmp6unmqj3j.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpa9sbuorm.conf syntax is ok
nginx: configuration file /tmp/tmpa9sbuorm.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 1067;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 18;
    disable_symlinks off;
    autoindex on;
    send_timeout 0;
    large_client_header_buffers 4 1458;
    client_max_body_size 800768;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/5.6.8;
            add_header X-Content-Type-Options nosniff;
            add_header Server apache;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.6.8 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 36;
    disable_symlinks off;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1239;
    client_max_body_size 1481728;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}nginx: the configuration file /tmp/tmprcze0a1u.conf syntax is ok
nginx: configuration file /tmp/tmprcze0a1u.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpxg_3p7ul.conf syntax is ok
nginx: configuration file /tmp/tmpxg_3p7ul.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options "";
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp6rhlijby.conf syntax is ok
nginx: configuration file /tmp/tmp6rhlijby.conf test is successful
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	  
	 The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/5.3.3;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpqjbsr_eu.conf syntax is ok
nginx: configuration file /tmp/tmpqjbsr_eu.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpw81co162.conf syntax is ok
nginx: configuration file /tmp/tmpw81co162.conf test is successful
 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/5.3.3 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp7pb5mi50.conf syntax is ok
nginx: configuration file /tmp/tmp7pb5mi50.conf test is successful
 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens off;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By nginx/1.16.0;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmp_mrwn1pp.conf syntax is ok
nginx: configuration file /tmp/tmp_mrwn1pp.conf test is successful
 * Manually resetting nginx to stopped state
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: nginx/1.16.0 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 1;
    large_client_header_buffers 4 1727;
    client_max_body_size 1619968;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1622016;
    server_tokens on;
    gzip off;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options "ALLOW-FROM http://www.exampletfm.com/";
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';";
        }
    }
}nginx: the configuration file /tmp/tmpd67c029z.conf syntax is ok
nginx: configuration file /tmp/tmpd67c029z.conf test is successful
 * Manually resetting nginx to stopped state
nginx: the configuration file /tmp/tmpjznfr9mp.conf syntax is ok
nginx: configuration file /tmp/tmpjznfr9mp.conf test is successful

Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Configuration → 
user nginx;
pid /var/run/nginx.pid;
worker_processes 4;
daemon on;
error_log /tmp/nginx-error.log warn;
events {
    worker_connections 890;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx-access.log;
    sendfile on;
    keepalive_timeout 82;
    disable_symlinks on;
    autoindex off;
    send_timeout 0;
    large_client_header_buffers 4 1727;
    client_max_body_size 1620992;
    server_tokens on;
    gzip on;
    log_format my_tracking $request_body;
    resolver 8.8.8.8 valid=30s;
    server {
        server_name www.exampletfm.com;
        listen 80;
        error_page 500 502 503 504 /50x.html;
        location ^~ /assets/public/assets/ {
            deny all;
        }
        location ^~ /assets/assets/ {
            deny all;
        }
        location /form {
            access_log /tmp/access.log my_tracking;
        }
        location / {
            root /tester/site/;
            index index.html index.htm;
            add_header X-Frame-Options DENY;
            add_header X-Powered-By PHP/7.2.1;
            add_header X-Content-Type-Options nosniff;
            add_header Server nginx/1.16.0;
            add_header X-XSS-Protection 1;
            add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'self';";
        }
    }
}
Alert →
	 http://www.exampletfm.com 
	 <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> 
	 The page includes one or more script files from a third-party domain. 
	 Low
Alert →
	 http://www.exampletfm.com 
	  
	 The response appears to contain suspicious comments which may help an attacker. 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/robots.txt 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/sitemap.xml 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 <form action="../form" method="post" enctype="multipart/form-data"> 
	 No Anti-CSRF tokens were found in a HTML submission form.
A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy. * Manually resetting nginx to stopped state

Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Scan progress %: 80
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  18  Fitness  11
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 2
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 1
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
→ Accessing target http://www.exampletfm.com
Spidering target http://www.exampletfm.com
Spider completed
Active Scanning target http://www.exampletfm.com
Enable all scanners -> OK
Scan progress %: 0
Active Scan completed
Stopping all scans...
Total:  15  Fitness  8
 
	 Low
Alert →
	 http://www.exampletfm.com/test/upload.html 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
Alert →
	 http://www.exampletfm.com/form 
	  
	 Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server 
	 Low
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 0000000000 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 134348800 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 516607038 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20160320 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 20131229 
	 A timestamp was disclosed by the application/web server - Unix 
	 Informational
Alert →
	 http://www.exampletfm.com/iStock-516607038-computer-hacker.jpg 
	 X-Powered-By: PHP/7.2.1 
	 The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to. 
	 Low
sorted
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (8, [1546, 37, 0, 0, 1, 1239, 1447, 1, 1, 0, 4, 0, 2, 1, 0]),
 (8, [1546, 66, 0, 1, 0, 1298, 909, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 1, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 0, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 1, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 0, 2042, 1379, 1, 1, 1, 3, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1582, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 1, 4, 0, 2, 1, 0]),
 (8, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 1, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1546, 36, 0, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0])]
←←

Población de 16 individuos durante 8 generaciones
Población inicial:
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (10, [1550, 101, 1, 1, 0, 1623, 687, 0, 0, 0, 2, 0, 0, 0, 0]),
 (10, [1090, 120, 1, 1, 0, 2042, 1379, 1, 1, 2, 3, 0, 2, 0, 1]),
 (10, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 0, 1]),
 (11, [557, 54, 0, 0, 0, 1178, 1797, 0, 1, 0, 0, 1, 2, 1, 1]),
 (11, [598, 11, 1, 0, 1, 2017, 1963, 0, 0, 0, 1, 1, 2, 2, 1]),
 (11, [541, 86, 0, 0, 0, 725, 1294, 1, 1, 1, 0, 1, 1, 1, 0]),
 (13, [1409, 28, 1, 0, 1, 1779, 1328, 1, 0, 1, 2, 1, 2, 0, 1]),
 (13, [981, 45, 1, 1, 1, 924, 1498, 0, 1, 2, 4, 1, 0, 0, 1]),
 (14, [1196, 109, 1, 0, 0, 896, 834, 1, 0, 0, 5, 0, 2, 2, 2]),
 (14, [1472, 103, 1, 1, 0, 1558, 1447, 0, 0, 0, 2, 0, 2, 2, 2]),
 (14, [1419, 22, 0, 1, 1, 1259, 668, 1, 0, 2, 5, 0, 0, 2, 2]),
 (19, [944, 103, 0, 0, 1, 628, 2020, 1, 1, 1, 1, 1, 2, 0, 2])]
Población final:
[(8, [1546, 66, 0, 1, 0, 1298, 908, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1067, 18, 0, 1, 0, 1458, 781, 1, 0, 2, 1, 0, 0, 1, 1]),
 (8, [1546, 37, 0, 0, 1, 1239, 1447, 1, 1, 0, 4, 0, 2, 1, 0]),
 (8, [1546, 66, 0, 1, 0, 1298, 909, 1, 0, 0, 4, 0, 2, 2, 0]),
 (8, [2030, 37, 0, 1, 1, 1239, 1447, 1, 1, 1, 0, 0, 0, 1, 1]),
 (8, [890, 82, 0, 0, 0, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 1, 1239, 1447, 1, 1, 1, 0, 0, 1, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0]),
 (8, [2030, 37, 0, 0, 0, 2042, 1379, 1, 1, 1, 3, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 0, 1727, 1582, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [890, 82, 1, 0, 0, 1727, 1584, 1, 0, 1, 4, 0, 2, 1, 0]),
 (8, [915, 114, 0, 0, 0, 725, 1224, 1, 1, 0, 4, 0, 2, 1, 1]),
 (8, [890, 82, 1, 0, 1, 1727, 1583, 1, 1, 2, 2, 0, 2, 1, 0]),
 (8, [1546, 36, 0, 0, 0, 1727, 1584, 1, 0, 0, 4, 0, 2, 1, 0])]
Elapsed time is 2111.305171 seconds.
