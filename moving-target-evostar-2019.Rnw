\documentclass[runningheads]{llncs}

%%% Local Variables:
%%% ispell-local-dictionary: "english"
%%% End:
\usepackage[utf8]{inputenc}
\usepackage{booktabs} % For formal tables
\usepackage{graphicx}


\begin{document}
\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}

<<setup, cache=FALSE,echo=FALSE>>=
library(ggplot2)
library(ggthemes)
@

\title{Using evolutionary algorithms for server hardening via the moving target defense technique}

 \author{A\inst{1}
 \and
 B\inst{1}
 \and
 C\inst{1}
 \and
 D\inst{2}
}

\institute{%
   University Z\\
   \email{an@ema.il}
\and
   University Y\\
   \email{another@ema.il}
}

%\authorrunning{Merelo et al.}
%\titlerunning{Using evolutionary algorithms for server hardening via the moving target defense technique}

\maketitle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{abstract}
The {\em moving target defense} from cyberattacks consists in changing the profile or signature of certain services in an Internet node so that an attacker is not able to identify it uniquely, or find specific angles of attack for it. From an optimization point of view, generating profiles that change and, besides, optimize security is a combinatorial optimization problem where different service configurations are generated and evaluated, seeking the optimum according to a standard server vulnerability evaluation score. In this paper we will use an evolutionary algorithm to generate different server profiles that also minimize the risk of being attacked. Working on the well-known web server {\tt nginx}, and using an industry-standard web configuration, we will prove that this evolutionary algorithm is able to generate a sufficient amount of different and secure profiles in time for them to be deployed in the server. The system has been released as free software, as is the best practice in security tools.
\end{abstract}
\keywords{Security, cyberattacks, performance evaluation.}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
Many different techniques are used to deflect cyberattacks, that is, attempts to gain access to certain assets through running code remotely. One of them is called {\em moving target defense} \cite{jajodia2011moving}

Protection against cybersecurity threats can be implemented by a proper software configuration without the need to invest in costly security solutions. In order to achieve an optimal configuration, an objective score must be used to measure security or its inverse, vulnerabilities \cite{yang2012security}: The `Common Vulnerability Scoring System' or CVSS \cite{cvss} is an open standard to measure computer and network security vulnerabilities. Scores range from 0 to 10, with 10 being the most severe. In order to protect properly a system, we need to optimize this score so that it reaches zero, without compromising any kind of functionality.

Many vulnerabilities can be caused by misconfiguration or an inadequate combination of parameters. In addition, a given service can have practically infinite possible configurations, some being less functional and/or vulnerable than others.

Also, to improve the mechanism of protection against cyberattacks, the attacker can be fooled by a continuous change in the configuration of a given service, so meanwhile an attacker is fingerprinting your service to discover vulnerabilities the genetic algorithm will have changed the configuration so the attacker can't define an attack based on the known vulnerabilities.

Finding these correct configurations, as well as similar and fully functional configurations, can be a complex task if it is done manually so ideally we would need to find a way to generate such configurations in an automatic way, using some search heuristic. % You need to make paragraphs follow each other - JJ

A genetic algorithm, which is a search heuristic, can be used to
discover new, secure and diverse configurations by modeling a given
configuration as if they were chromosomes and the different individual
configuration options as if they were genes
\cite{john_evolutionary_2014}. The main idea of genetic algorithms is
that by mutation, crossing and selection of these chromosomes we get
better configurations. These mutations are randomly incorporated,
which provides diversity. 

While CVSS is an abstract way to score security, we first need to decide on a system for which security is going to be optimized and, second, on a tool that will be able to automatically acompute CVSS. For the former we will use an open-source OWASP project called Juice-Shop \cite{luburic2019utilizing,juice-shop} that consists in a vulnerable e-commerce platform written in Node.js, Express and Angular. % Say something about this: this is a typical application, which is complex enough, and so on and so forth - JJ

For the latter, that is, to quantify the security of a given configuration we can use tools like ZAP \cite{bennetts2013owasp}. ZAP is an open-source security analysis tool  for web applications developed by OWASP,  crawls and analyzes a specified site for security vulnerabilities, yielding a scalar value based on CVSS score. 


The rest of the paper is organized as follows: next we present a brief
state of the art in the subject of moving target defense. The
methodology and results is presented in Section \ref{sec:res},
followed by our conclusions.


%Explain additional concepts, such as entropy.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{State of the art}

Bioinspired metaheuristics have been often used in the area of cybersecurity; for instance, some authors have proposed using evolutionary-based optimization techniques to improve detection of SQL injection attacks and anomalies within HTTP requests \cite{CHORAS2018179}.
while others \cite{Kozik2014} focus on detecting SQLIA (SQL Injection Attacks) and XSS (Cross Site Scripting) at the application layer by modeling HTTP requests with the use of regular expressions.

\bigskip
Moving target defense has many applications in the field of cybersecurity. For example, in hardware systems, such as the Morpheus processor that is able to change its internal configuration every 50 milliseconds to difficult attacks \cite{gallagher_morpheus:_2019}, a technique like this would have prevented the Spectre vulnerability suffered by Intel processors that exploited failures in the speculative execution feature.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Methodology, experimental setup and results}
\label{sec:res}

The last stable version of Nginx (1.17) has more than 700 configuration directives, a huge number to do our experiments so to validate our hypothesis we choose a subset of 9 Nginx directives (\ref{table:nginx_directives}) and 6 HTTP headers (\ref{table:http_headers}), all of them related to security hardening.

\begin{table}
\begin{tabular}{|l|l|}
\hline
\textbf{Directive name} 	   & \textbf{Possible values} \\ \hline
worker\_connections            & 512 - 2048 \\ \hline
keepalive\_timeout             & 10 - 120 \\ \hline
disable\_symlinks              & True/False \\ \hline
autoindex                      & True/False \\ \hline
send\_timeout                  & True/False \\ \hline
large\_client\_header\_buffers & 512 - 2048 \\ \hline
client\_max\_body\_size        & 512 - 2048 \\ \hline
server\_tokens                 & True/False \\ \hline
gzip                           & True/False \\ \hline
\end{tabular}
\label{table:nginx_directives}
\caption{NGINX directive list}
\end{table}

And the HTTP headers are the next ones:

\begin{table}
\begin{tabular}{|l|l|}
\hline
\textbf{Header name}           & \textbf{Possible values} \\ \hline
X-Frame-Options                & SAMEORIGIN, ALLOW-FROM, DENY \\ \hline
X-Powered-By                   & PHP/5.3.3, PHP/5.6.8, PHP/7.2.1, Django2.2, nginx/1.16.0 \\ \hline
X-Content-Type-Options         & nosniff \\ \hline
Server                         & apache, caddy, nginx/1.16.0 \\ \hline
X-XSS-Protection	           & 0, 1, 1; mode=block \\ \hline
Content-Security-Policy		   & default-src 'self', default-src 'none', default-src 'host *.google.com'\\ \hline

\end{tabular}
\label{table:http_headers}
\caption{HTTP header list}
\end{table}


\section{Conclusions and discussion}
\label{sec:conclusions}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Acknowledgements}

%   This paper has been supported in part by projects DeepBio (TIN2017-85727-C4-2-P) and AMED (co-funded by European Regional Development Fund and the region Normandy).

Acks\\
Taking\\
This much space

\bibliographystyle{splncs04}
\bibliography{geneura,moving-target}

\end{document}
